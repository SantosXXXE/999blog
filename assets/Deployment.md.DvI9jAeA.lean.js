import{_ as a,c as i,a3 as t,o as e}from"./chunks/framework.cY_EENHy.js";const k=JSON.parse('{"title":"GitHub Page的手动部署","description":"","frontmatter":{"title":"GitHub Page的手动部署","date":"2024-06-27T00:00:00.000Z","updated":"2024-06-27T00:00:00.000Z","categories":"Deployment","tags":["Deployment","valaxy"]},"headers":[],"relativePath":"Deployment.md","filePath":"Deployment.md"}'),n={name:"Deployment.md"};function h(p,s,l,o,d,r){return e(),i("div",null,s[0]||(s[0]=[t('<h1 id="manual-deployment" tabindex="-1">Manual Deployment <a class="header-anchor" href="#manual-deployment" aria-label="Permalink to &quot;Manual Deployment&quot;">​</a></h1><p>要使用<strong>Valaxy</strong>项目的<strong>dist</strong>文件夹在<strong>GitHub</strong>上部署项目，请遵循以下步骤</p><h3 id="构建项目" tabindex="-1">构建项目 <a class="header-anchor" href="#构建项目" aria-label="Permalink to &quot;构建项目&quot;">​</a></h3><p>首先，确保你已经构建了你的项目并在项目根目录下运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>这将在<strong>dist</strong>目录下生成项目的静态文件</p><h3 id="初始化本地仓库" tabindex="-1">初始化本地仓库 <a class="header-anchor" href="#初始化本地仓库" aria-label="Permalink to &quot;初始化本地仓库&quot;">​</a></h3><p>如果你的<strong>dist</strong>目录不是一个<strong>Git</strong>仓库，你需要初始化它</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><h3 id="添加远程仓库" tabindex="-1">添加远程仓库 <a class="header-anchor" href="#添加远程仓库" aria-label="Permalink to &quot;添加远程仓库&quot;">​</a></h3><p>添加你的<strong>GitHub</strong>仓库作为远程仓库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/santosxxxe/999blog.git</span></span></code></pre></div><p>请将 <strong>URL</strong> 中的你的用户名/你的仓库替换成你<strong>GitHub</strong>仓库的真实用户名和仓库名</p><h3 id="创建-gh-pages-分支" tabindex="-1">创建 gh-pages 分支 <a class="header-anchor" href="#创建-gh-pages-分支" aria-label="Permalink to &quot;创建 gh-pages 分支&quot;">​</a></h3><p>如果你还没有<strong>gh-pages</strong>分支，创建并切换到该分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --orphan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h3 id="提交构建的文件" tabindex="-1">提交构建的文件 <a class="header-anchor" href="#提交构建的文件" aria-label="Permalink to &quot;提交构建的文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Deploy to GitHub Pages&quot;</span></span></code></pre></div><h2 id="推送到github" tabindex="-1">推送到GitHub <a class="header-anchor" href="#推送到github" aria-label="Permalink to &quot;推送到GitHub&quot;">​</a></h2><p>将<strong>gh-pages</strong>分支推送到<strong>GitHub</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>手动部署到 GitHub Pages 为开发者提供了完全控制部署过程的能力，允许进行超出自动化解决方案可能提供的定制化操作。这种方法非常适合需要特定配置的项目，或者那些想要深入了解持续集成/持续部署（CI/CD）工作流程的人。</p><p>虽然这个过程可能比使用自动化工具更加繁琐，但它使开发者做好准备，有效地故障排除和管理部署。如果你在部署期间遇到任何问题，命令行的输出和错误消息可以指导你解决潜在问题。</p><p>提醒一下，确保你总是将更改提交并推送到适当的分支，以避免干扰你的项目在 GitHub Pages 上的工作流程。</p><p>对于刚接触这个过程的人来说，在尝试手动部署之前，可能有助于熟悉 Git 和 GitHub 的基础知识。一旦你熟悉了手动过程，你可能会考虑探索使用 GitHub Actions 或其他 CI/CD 平台的自动化工作流程，以简化部署任务。</p><p>::: zh-CN <strong>如果你发现这篇指南有用，或者有改进建议，请随时联系我们或参与讨论。</strong>🎉 🎉 🎉 :::</p><p>::: en *<strong>If you find this guide useful or have suggestions for improvements, please feel free to contact us or join the discussion.</strong>🎉 🎉 🎉 :::</p>',30)]))}const c=a(n,[["render",h]]);export{k as __pageData,c as default};
